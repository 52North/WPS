/***************************************************************
Copyright © 2009 52°North Initiative for Geospatial Open Source Software GmbH

 Author: Matthias Mueller, TU Dresden

 Contact: Andreas Wytzisk, 
 52°North Initiative for Geospatial Open Source SoftwareGmbH, 
 Martin-Luther-King-Weg 24,
 48155 Muenster, Germany, 
 info@52north.org

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; even without the implied WARRANTY OF
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program (see gnu-gpl v2.txt). If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA or visit the Free
 Software Foundation’s web page, http://www.fsf.org.

 ***************************************************************/

package org.n52.wps.ags;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;

import org.apache.log4j.Logger;

import com.esri.arcgis.geoprocessing.GeoProcessor;
import com.esri.arcgis.geoprocessing.IGeoProcessor;
import com.esri.arcgis.interop.AutomationException;
import com.esri.arcgis.server.IServerContext;
import com.esri.arcgis.server.IServerObjectManager;
import com.esri.arcgis.server.ServerConnection;
import com.esri.arcgis.system.IVariantArray;
import com.esri.arcgis.system.ServerInitializer;
import com.esri.arcgis.system.VarArray;


public class AGSWorkspace{
	private static Logger LOGGER = Logger.getLogger(AGSWorkspace.class);
	
	private final File workspaceDir;
	private final AGSProperties agsProps;
	
	
	public AGSWorkspace(){
		
		//initialize workspace and server props
		LOGGER.info("Creating AGS props ...");
		agsProps = AGSProperties.getInstance();
		String directory = agsProps.getWorkspaceBase() + "\\" + String.valueOf(System.currentTimeMillis());
		workspaceDir = new File(directory);
		workspaceDir.mkdir();
		
	}
	
	public final void executeGPTool(String toolName, String toolboxPath, String[] parameters){
		
		//bootstrap AO
		//AGSProperties.bootstrapArcobjectsJar();
		
		//get a connection to the server
		LOGGER.info("Getting AGS connection object ...");
		ServerConnection connection = getAGSConnection();
		
		try{
			// Get reference to ServerObjectManager
			IServerObjectManager som = connection.getServerObjectManager();
			IServerContext context = som.createServerContext("", "");
			LOGGER.info("ServerContext created!");
			
			//create GP object on server
			IGeoProcessor gp = (GeoProcessor) (context.createObject(GeoProcessor.getClsid()));
			LOGGER.info("GeoProcessor initialized!");
			
			//create the parameter object
			IVariantArray fParams = (VarArray)(context.createObject(VarArray.getClsid()));
			
			for (int i = 0; i < parameters.length; i++)
				fParams.add(parameters[i]);
			
			//load the toolbox
			//null: internal toolbox - skip loading
			if (toolboxPath != null){
				gp.addToolbox(toolboxPath);
				LOGGER.info("Added: " + toolboxPath);
			}
			
			//execute GP tool
			LOGGER.info("Executing GPTool ...");
			gp.execute(toolName, fParams, null);
			
			//free ags resources
			context.releaseContext();
			LOGGER.info("done!");
		}
		catch (AutomationException ae){
			LOGGER.error("Caught J-Integra AutomationException: " + ae.getMessage() + "\n");
			LOGGER.error(ae.getDescription());
			ae.printStackTrace();
		}
			
		catch (IOException e){
			LOGGER.error("Caught IOException: " + e.getMessage() + "\n");
			e.printStackTrace();
		}
	}
	
	
	//delete the current workspace
	protected void finalize(){

		if (deleteDirectory(workspaceDir)){
			LOGGER.info("Workspace successfully deleted!");
		}
		else {
			LOGGER.info("Workspace could not be deleted :-(");
		}
		
		//just to be safe - call the destructor from the superior class
		try {
			super.finalize();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static final boolean deleteDirectory(File dirPath) {
		if( dirPath.exists() ) {
			File[] files = dirPath.listFiles();
		    for(int i = 0; i < files.length; i++) {
		    	if(files[i].isDirectory()) {
		    		deleteDirectory(files[i]);
		        }
		        else files[i].delete();
		    }
		}
		return( dirPath.delete() );
	}
	
	private final ServerConnection getAGSConnection(){
		
		// Initialize server
		//agsProps.bootstrapArcobjectsJar();
		LOGGER.info("initializing server ...");
		ServerInitializer serverInitializer = new ServerInitializer();
		serverInitializer.initializeServer(agsProps.getDomain(), agsProps.getUser(), agsProps.getPass());
		ServerConnection connection = null;
		try {
			//connect
			connection = new ServerConnection();
			connection.connect(agsProps.getIP());
			LOGGER.info("server initialized!");

		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return connection;
	}
	
	public final File getWorkspace(){
		return this.workspaceDir;
	}
	
}
